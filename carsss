#include <iostream>
#include <string>
using namespace std;
class vehicle
{
	int vehicleID;
	string manufacturer;
	string model;
	int year;

public:
	vehicle(){}
	
	vehicle(int i)
	{
		cout << endl;

		cout << "Enter vehicle ID : ";
		cin >> vehicleID;

		cout << "Enter manufacturer name : ";
		cin >> manufacturer;

		cout << "Enter model name: ";
		cin >> model;

		cout << "Enter manufactured year : ";
		cin >> year;
	}

	~vehicle(){}

	int get_id()
	{
		return vehicleID;
	}

	void print()
	{
		cout
			<< "vehicle ID : " << vehicleID << endl
			<< "Manufacturer : " << manufacturer << endl
			<< "Model : " << model << endl
			<< "Year : " << year << endl;
	}
};

class car : public vehicle
{
public:
	string fuel;

	car(){}

	car(int i) : vehicle(1)
	{
		cout << "Enter fuel type (CNG/DIESEL) : ";

		cin >> fuel;
	}
};

class electric : public car
{
public:
	int battery;

	electric(){}

	electric(int i) : car(1)
	{
		cout << "Enter battery capacity (IN kWh) : ";
		cin >> battery;
		cout << endl;
	}

	void print_electric()
	{
		cout << "----- " << "Electric cars ------\n";
		print();

		cout << "Fuel type is : " << fuel << endl;
		cout << "Battery capacity is : " << battery << endl
			 << endl;
	}
};

class Aircraft
{
public:
	int flightrange;

	Aircraft(){}

	Aircraft(int i)
	{
		cout << "Flightrange : ";
		cin >> flightrange;
	}
};

class flyingcar : public Aircraft, public car
{
public:

	flyingcar() {}

	flyingcar(int i) : Aircraft(1), car(1) {}

	void print_flyingcar()
	{
		print();
		cout << "flight range is : " << flightrange << endl;
		cout << "Fuel type is : " << fuel << endl;
	}
};

class sportscar : public electric
{
public:
	int speed;

	sportscar() {}

	sportscar(int i) : electric(1)
	{
		cout << "Topspeed (IN KMPH): ";
		cin >> speed;
	}

	void print_sportscar()
	{
		cout << "------- " << "Sports car cars -------\n";

		print();
		cout << "Top spedd is : " << speed << endl;
		cout << "Battery capacity is : " << battery;
	}
};

class sedan : public car
{
public:

	sedan(int i) : car(1){}

	sedan(){}

	void print_sedan()
	{
		cout << "-----" << "Sedan cars ---\n";

		print();
		cout << "Fuel type is : " << fuel << endl
			 << endl;
	}
};

class SUV : public car
{
public:

	SUV(){}

	SUV(int i) : car(1){}

	void print_suv()
	{
		cout << "-------" <<"SUV cars -------\n";

		print();
		cout << "Fuel type is : " << fuel << endl;
	}
};

class VehicleRegistry
{

	vehicle vehicles;
	

	sedan sedans[50];
	int sedanindex = 0;

	electric electrics[50];
	int electricindex = 0;

	flyingcar flyingcars[50];
	int flyingcarindex = 0;

	SUV suvs[50];
	int suvindex = 0;

	sportscar sportscars[50];
	int sportscarindex = 0;

public:
	void add(SUV c)
	{
		suvs[suvindex] = c;
		suvindex++;
	}

	void add(electric v)
	{
		electrics[electricindex] = v;
		electricindex++;
	}

	void add(sedan cars)
	{
		sedans[sedanindex] = cars;
		sedanindex++;
	
	}

	void add(flyingcar s)
	{
		flyingcars[flyingcarindex] = s;
		flyingcarindex++;
	}

	void add(sportscar a)
	{
		sportscars[sportscarindex] = a;
		sportscarindex++;
	}

	void display_electric()
	{
		if (electricindex <= 0)
		{
			cout << "Car is not available : " << endl
				 << endl;
		}

		cout << "Total " << electricindex << " Electric cars are available" << endl;

		for (int i = 0; i < electricindex; i++)
		{
			electrics[i].print_electric();
		}
	}

	void display_SUV()
	{
		if (suvindex <= 0)
		{
			cout << "Car is not available : " << endl<<endl; 
		}
		cout << "Total " << suvindex << " SUV cars are available" << endl;
		for (int i = 0; i < suvindex; i++)
		{
			suvs[i].print_suv();
		}
	}

	void display_sedan()
	{
		if (sedanindex <= 0)
		{
			cout << "Car is not available : " << endl
				 << endl;
		}

		cout << "Total " << sedanindex << " Sedan cars are available " << endl;

		for (int i = 0; i < sedanindex; i++)
		{
			sedans[i].print_sedan();
		}
	}

	void display_flyingcar()
	{

		if (flyingcarindex <= 0)
		{
			cout << "Car is not available : " << endl
				 << endl;
		}

		cout << "Total " << flyingcarindex << " Flying cars are available" << endl;

		for (int i = 0; i < flyingcarindex; i++)
		{
			flyingcars[i].print_flyingcar();
		}
	}

	void display_sportscar()
	{
		if (sportscarindex <= 0)
		{
			cout << "Car is not available : " << endl
				 << endl;
		}

		cout << "Total " << sportscarindex << " Sports cars are available" << endl;

		for (int i = 0; i < sportscarindex; i++)
		{
			sportscars[i].print_sportscar();
		}
	}

	void display_all_car()
	{

		for (int i = 0; i < electricindex; i++)
		{
			electrics[i].print_electric();
		}

		for (int i = 0; i < sportscarindex; i++)
		{
			sportscars[i].print_sportscar();
		}

		for (int i = 0; i < suvindex; i++)
		{
			suvs[i].print_suv();
		}

		for (int i = 0; i < sedanindex; i++)
		{
			sedans[i].print_sedan();
		}
	}

	void search(int num)
	{
		int temp = 0;

		for (int i = 0; i < electricindex; i++)
		{
			if (electrics[i].vehicle::get_id() == num)
			{
				electrics[i].print_electric();
				temp = 1;
				break;
			}
		}

		for (int i = 0; i < sportscarindex; i++)
		{
			if (sportscars[i].vehicle::get_id() == num)
			{
				sportscars[i].print_electric();
				temp = 1;
				break;
			}
		}

		for (int i = 0; i < suvindex; i++)
		{
			if (suvs[i].vehicle::get_id() == num)
			{
				suvs[i].print_suv();
				temp = 1;
				break;
			}
		}

		for (int i = 0; i < sedanindex; i++)
		{
			if (sedans[i].vehicle::get_id() == num)
			{
				sedans[i].print_sedan();
				temp = 1;
				break;
			}
		}

		for (int i = 0; i < flyingcarindex; i++)
		{
			if (flyingcars[i].vehicle::get_id() == num)
			{
				flyingcars[i].print_flyingcar();
				temp = 1;
				break;
			}
		}

		if (temp==0)
		{
			cout<<"CAR NOT FOUND !!!.."<<endl;
		}
	}
};

int main()
{

	VehicleRegistry registery;

	string type;
	int choice, num, choice2;

	do
	{

		cout << "-----VEHICLE REGISTORY-----\n"
			 << "Press 1 to add car \nPress 2 for display all car \nPress 3 to search car by its type \nPress 4 for search by its ID\nPress 0 to exit\n\n";
		cin >> choice;

		switch (choice)
		{
		case 1:
			cout << "Select vehicle type :\n"
				 << "1. Electric \n2. SUV \n3. sedan \n4. flying car \n5. sports car\n"
				 << endl;
			cout << "SELECT OPTION :";
			cin >> choice2;

			switch (choice2)
			{
			case 1:
			{
				electric a(1);
				registery.add(a);
			}
			break;

			case 2:
			{
				SUV c(1);
				registery.add(c);
			}
			break;

			case 3:
			{
				sedan ca(1);
				registery.add(ca);
			}
			break;

			case 4:
			{
				flyingcar a(1);
				registery.add(a);
			}
			break;

			case 5:
			{
				sportscar a(1);
				registery.add(a);
			}
			break;

			default:
				cout << "Inavlid choice " << endl;
				break;
			}
			break;

		case 2:

			registery.display_all_car();

			break;

		case 3:

			cout << "Which types of car data data do you want to display ?";
			cin >> type;

			if (type == "suv" || type == "SUV")
			{
				registery.display_SUV();
			}
			else if (type == "electric" || type == "ELECTRIC")
			{
				registery.display_electric();
			}
			else if (type == "flyingcar" || type == "FLYINGCAR")
			{
				registery.display_flyingcar();
			}
			else if (type == "sedan" || type == "SEDAN")
			{
				registery.display_sedan();
			}
			else if (type == "sportscar" || type == "SPORTSCAR")
			{
				cout << "called";
				registery.display_sportscar();
			}
			else
			{
				cout << "Inavlid choice" << endl;
				break;
			}
			break;
			
		case 4:

			cout << "Enter vehicle ID : ";
			cin >> num;
			registery.search(num);

			break;

		default:

			cout << "Invalid choice..Try again" << endl;

			break;

		case 0:
			cout << "You are exiting from windows ....Thank you .." << endl;
			break;
		}

	} while (choice != 0);

	return 0;
}
